// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(uuid())
  name                    String
  email                   String                    @unique
  password                String
  phoneNumber             String?
  adress                  String?
  avatar                  String?
  role                    Role                      @default(USER)
  profileType             ProfileType
  businessProfile         BusinessProfile?
  locationId              String?
  location                Location?                 @relation(fields: [locationId], references: [id])
  businessProfileId       String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Listing                 Listing[]
  Subscription            Subscription[]
  Favorite                Favorite[]
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
  Following               Follower[]                @relation("Following")
  Follower                Follower[]                @relation("Follower")

  @@index([email])
}

model Location {
  id        String   @id @default(uuid())
  country   String
  city      String
  latitude  String?
  longitude String?
  createdAt DateTime @default(now())

  User    User[]
  Listing Listing[]
}

enum ProfileType {
  PERSONAL
  BUSINESS
}

enum Role {
  USER
  PRO
  ADMIN
}

model BusinessProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  vatNumber String?
  website   String?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String             @unique
  user      User               @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan
  status    SubscriptionStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime           @default(now())

  @@index([userId, plan, status])
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  MODERATOR
  SUPPORT
  CONTENT_MANAGER
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  image         String
  description   String?
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  images      String?
  description String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  listings    Listing[]
  createdAt   DateTime  @default(now())

  @@unique([name, categoryId])
}

model Listing {
  id            String        @id @default(uuid())
  title         String
  description   String
  price         Float
  currency      String
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  location      Location?     @relation(fields: [locationId], references: [id])
  locationId    String?
  extraFields   Json?
  images        String[]
  status        ListingStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  Boost         Boost[]       @relation("ListingBoosts")
  Favorite      Favorite[]

  @@index([subCategoryId])
  @@index([locationId])
}

enum ListingStatus {
  ACTIVE
  SUSPENDED
  SOLD
  BLOCKED
}

model Boost {
  id         String      @id @default(uuid())
  listingId  String
  listing    Listing     @relation("ListingBoosts", fields: [listingId], references: [id])
  startDate  DateTime    @default(now())
  endDate    DateTime
  status     BoostStatus @default(ACTIVE)
  amountPaid Float
  boostType  BoostType

  @@index([listingId, status])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

enum BoostStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum BoostType {
  TOP_LISTING
  HIGHLIGHTED
  FEATURED
}

model Conversation {
  id        String                    @id @default(uuid())
  isGroup   Boolean                   @default(false)
  name      String? // Nom du groupe (si c'est un groupe)
  users     ConversationParticipant[]
  messages  Message[]
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  joinedAt       DateTime     @default(now())

  @@unique([conversationId, userId]) 
}

model Message {
  id             String       @id @default(uuid())
  content        String
  sentAt         DateTime     @default(now())
  senderId       String
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  isRead         Boolean      @default(false)

  @@index([senderId])
  @@index([conversationId])
}

model Follower {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  followedAt  DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Follower", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
